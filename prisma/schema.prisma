generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
}

enum Role {
  USER
  TELECONSULTER
  HEALTHCARE_FACILITY
  ADMIN
}

model User {
  id                Int                @id @default(autoincrement())
  firstName         String?
  lastName          String?
  email             String             @unique
  password          String
  location          String?            // Personal location of the user
  phone             String?            // User's personal phone number
  role              Role               @default(USER)
  status            Status             @default(PENDING)
  appointments      Appointment[]
  teleconsultations Teleconsultation[]
  notifications     Notification[]
  transactions      Transaction[]
  sessions          Session[]
  feedback          Feedback[] 
  prescriptions     Prescription[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  healthcareFacility   HealthcareFacility? @relation(fields: [healthcareFacilityId], references: [id])
  healthcareFacilityId Int?                @unique

  Teleconsultor Teleconsultor[]

  Diagnosis Diagnosis[]

  ChatSession ChatSession[]

  PaymentMethod PaymentMethod[]

  SupportTicket SupportTicket[]

  HelpArticle HelpArticle[]
}

model HealthcareFacility {
  id           Int           @id @default(autoincrement())
  name         String        // Facility Name
  location     String        // Facility Location (separate from user location)
  services     String
  hours        String
  contact      String        // Facility contact number (separate from user phone number)
  type         String        // Type of facility (clinic, hospital, etc.)
  user         User?         @relation // Linked user who created the facility
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // Payment method type (e.g., 'credit_card', 'paypal', 'chapa', 'stripe')
  provider  String   // Payment provider name (e.g., 'Visa', 'Mastercard', 'PayPal', etc.)
  last4     String?  // Last 4 digits of the card for display
  cardType  String?  // Type of card (Visa, MasterCard, etc.)
  expMonth  Int?     // Expiry Month for cards
  expYear   Int?     // Expiry Year for cards
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
model ChatSession {
  id            Int        @id @default(autoincrement())
  userId        Int        // User who started the session
  sessionName   String?    // Optional name for the chat session
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  diagnoses     Diagnosis[] // Chat messages (diagnoses) in the session

  user          User       @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Diagnosis {
  id           Int      @id @default(autoincrement())
  chatSessionId Int?    // Link to the chat session
  userId       Int      // Connect the diagnosis to the user
  diagnosisText String   // The actual diagnosis text (AI response)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  chatSession   ChatSession?  @relation(fields: [chatSessionId], references: [id]) // Nullable relation to session
  @@index([userId])
  @@index([chatSessionId])
  Teleconsultation Teleconsultation[]
}



model Teleconsultor {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  workingHours String?
  specialties  String?
  doctorInfo   String? // Additional doctor-related information
  rate         Float?  // Rate for teleconsultation
  rating       Float?  // Average rating from feedback
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  feedbacks Feedback[]

  Teleconsultation Teleconsultation[]
}



model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Appointment {
  id                 Int           @id @default(autoincrement())
  date               DateTime
  userId             Int
  facilityId         Int?
  teleconsultationId Int?
  status             String
  transactions       Transaction[]
  prescription       Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId     Int?          @unique
  feedback           Feedback? // Feedback after the consultation
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  feedbackId         Int?

  user             User                @relation(fields: [userId], references: [id])
  facility         HealthcareFacility? @relation(fields: [facilityId], references: [id])
  teleconsultation Teleconsultation?   @relation(fields: [teleconsultationId], references: [id])

  @@index([userId])
  @@index([facilityId])
  @@index([teleconsultationId])
  @@index([feedbackId])
}
model HelpArticle {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int      // Add author relation
  author    User     @relation(fields: [authorId], references: [id])
}

model SupportTicket {
  id        Int      @id @default(autoincrement())
  userId    Int      // User who submitted the ticket
  title     String   // Short title or description of the issue
  message   String   // Full message with issue details
  status    String   @default("Open") // Status: 'Open', 'In Progress', 'Resolved', 'Closed'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model MedicalInformation {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  keywords  String
  category  String
  author    String
  url       String? // New field to store the URL of the article
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model EmergencyService {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthTip {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  category  String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teleconsultation {
  id            Int           @id @default(autoincrement())
  date          DateTime
  userId        Int
  teleconsultorId Int         // Link to Teleconsultor
  doctor        String
  status        String        // e.g., Pending, Approved, In Progress, Completed
  sessionUrl    String?       // URL for video consultation session
  paymentStatus String        @default("Pending")
  notes         String?       // New: Doctor's notes
  transactions  Transaction[]
  appointments  Appointment[]
  feedback      Feedback[]    // Feedback given for the teleconsultation
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id])
  teleconsultor Teleconsultor @relation(fields: [teleconsultorId], references: [id])  // Added relation to Teleconsultor

  @@index([userId])
  @@index([teleconsultorId])  // Add index on teleconsultorId
  Diagnosis Diagnosis[]
  Prescription Prescription[]
}


model Feedback {
  id                 Int      @id @default(autoincrement())
  userId             Int
  teleconsultationId Int? // Feedback on the teleconsultation session
  content            String // Feedback content
  rating             Int // Rating out of 5
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  teleconsultation Teleconsultation? @relation(fields: [teleconsultationId], references: [id])
  appointment      Appointment?      @relation(fields: [appointmentId], references: [id]) // Add this relation field

  appointmentId Int? @unique

  @@index([userId])
  @@index([teleconsultationId])
  @@index([appointmentId])
  Teleconsultor Teleconsultor[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  type      String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  userId             Int
  appointmentId      Int?
  teleconsultationId Int?
  txRef              String   @unique
  status             String
  amount             Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  appointment      Appointment?      @relation(fields: [appointmentId], references: [id])
  teleconsultation Teleconsultation? @relation(fields: [teleconsultationId], references: [id])

  @@index([userId])
  @@index([appointmentId])
  @@index([teleconsultationId])
}

model Prescription {
  id                 Int           @id @default(autoincrement())
  userId             Int
  teleconsultationId Int           // Add this field to link with teleconsultation
  doctor             String
  medicines          String
  dosage             String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user               User          @relation(fields: [userId], references: [id])
  teleconsultation   Teleconsultation @relation(fields: [teleconsultationId], references: [id])  // Add relation to Teleconsultation model

  @@index([userId])
  @@index([teleconsultationId])  // Add an index for performance
  Appointment Appointment[]
}
