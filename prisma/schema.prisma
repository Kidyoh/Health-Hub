generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
}

enum Role {
  USER
  TELECONSULTER
  HEALTHCARE_FACILITY
  PHARMACY
  ADMIN
}

model User {
  id                Int                @id @default(autoincrement())
  firstName         String?
  lastName          String?
  email             String             @unique
  password          String
  location          String?
  phone             String?
  role              Role               @default(USER)
  status            Status             @default(PENDING)
  appointments      Appointment[]
  teleconsultations Teleconsultation[]
  notifications     Notification[]
  transactions      Transaction[]
  sessions          Session[]
  feedback          Feedback[] 
  prescriptions     Prescription[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  healthcareFacility   HealthcareFacility? @relation(fields: [healthcareFacilityId], references: [id])
  healthcareFacilityId Int?                @unique

  teleconsultor Teleconsultor? 

  Pharmacy Pharmacy[]
}


model Pharmacy {
  id           Int      @id @default(autoincrement())
  name         String
  location     String
  contact      String
  status       Status   @default(PENDING) // Approved or pending approval
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Teleconsultor {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  workingHours String?
  specialties  String?
  doctorInfo   String? // Additional doctor-related information
  rate         Float?  // Rate for teleconsultation
  rating       Float?  // Average rating from feedback
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  feedbacks Feedback[]
}


model HealthcareFacility {
  id           Int           @id @default(autoincrement())
  name         String
  location     String
  services     String
  hours        String
  contact      String
  type         String
  user         User?         @relation
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Appointment {
  id                 Int           @id @default(autoincrement())
  date               DateTime
  userId             Int
  facilityId         Int?
  teleconsultationId Int?
  status             String
  transactions       Transaction[]
  prescription       Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId     Int?          @unique
  feedback           Feedback? // Feedback after the consultation
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  feedbackId         Int?

  user             User                @relation(fields: [userId], references: [id])
  facility         HealthcareFacility? @relation(fields: [facilityId], references: [id])
  teleconsultation Teleconsultation?   @relation(fields: [teleconsultationId], references: [id])

  @@index([userId])
  @@index([facilityId])
  @@index([teleconsultationId])
  @@index([feedbackId])
}

model MedicalInformation {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  keywords  String
  category  String
  author    String
  url       String? // New field to store the URL of the article
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model EmergencyService {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthTip {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  category  String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teleconsultation {
  id            Int           @id @default(autoincrement())
  date          DateTime
  userId        Int
  doctor        String
  status        String // e.g., Pending, Approved, In Progress, Completed
  sessionUrl    String? // URL for video consultation session
  paymentStatus String        @default("Pending")
  notes         String? // New: Doctor's notes
  transactions  Transaction[]
  appointments  Appointment[]
  feedback      Feedback[] // Feedback given for the teleconsultation
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Feedback {
  id                 Int      @id @default(autoincrement())
  userId             Int
  teleconsultationId Int? // Feedback on the teleconsultation session
  content            String // Feedback content
  rating             Int // Rating out of 5
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  teleconsultation Teleconsultation? @relation(fields: [teleconsultationId], references: [id])
  appointment      Appointment?      @relation(fields: [appointmentId], references: [id]) // Add this relation field

  appointmentId Int? @unique

  @@index([userId])
  @@index([teleconsultationId])
  @@index([appointmentId])
  Teleconsultor Teleconsultor[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  type      String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  userId             Int
  appointmentId      Int?
  teleconsultationId Int?
  txRef              String   @unique
  status             String
  amount             Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  appointment      Appointment?      @relation(fields: [appointmentId], references: [id])
  teleconsultation Teleconsultation? @relation(fields: [teleconsultationId], references: [id])

  @@index([userId])
  @@index([appointmentId])
  @@index([teleconsultationId])
}

model Prescription {
  id          Int          @id @default(autoincrement())
  userId      Int
  doctor      String
  medicines   String
  dosage      String
  appointment Appointment? // No need for the @relation attribute here

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}